name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Триггерится при push в ветку master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Сборка приложения (если требуется)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'  # Укажите версию Java, которую использует ваше приложение
          distribution: 'temurin'

      - name: Build with Maven
        working-directory: log-app  # Указываем рабочую директорию
        run: mvn clean package  # Если вы используете Maven. Для Gradle замените на `gradle build`

      # 3. Создание Docker-образа
      - name: Build Docker image
        working-directory: log-app  # Указываем рабочую директорию
        run: |
          docker build -t log-app .

      # 4. Сохранение Docker-образа в tar-архив
      - name: Save Docker image
        working-directory: log-app  # Указываем рабочую директорию
        run: |
          docker save log-app > log-app.tar

      # 5. Получение IP-адреса из inventory.ini
      - name: Parse inventory file to get IP address
        id: parse_inventory
        run: |
          SERVER_HOST=$(awk -F'=' '/ansible_host/ {split($2, arr, " "); print arr[1]}' log-app/inventory.ini | head -n 1)
          echo "SERVER_HOST=$SERVER_HOST" >> $GITHUB_ENV

      # 6. Копирование Docker-образа на сервер
      - name: Copy Docker image to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "log-app/log-app.tar"
          target: "/home/debian/"

      # 7. Загрузка и запуск Docker-контейнера на сервере
      - name: Deploy and run Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/debian/log-app/
            sudo docker load < log-app.tar
            sudo docker stop log-app || true
            sudo docker rm log-app || true
            sudo docker run -d --name log-app -p 18080:8080 log-app